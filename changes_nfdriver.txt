build 1.3.9.8
- Fixed issues in driver registration code in nfapi.

build 1.3.9.7
- Optimized IO code to reduce the usage of stack in driver.
- Fixed issues in the algorithm that disables filtering for TCP and UDP sockets.
- Added new API function nf_disableFiltering(). If this function is called before nf_free(), the driver tries to detach from filtered connections 
and avoid breaking them after closing the filtering application. If the packets are filtered asynchronously in a separate thread, make sure that 
the queue is flushed before a call to nf_disableFiltering().

build 1.3.9.6
- Bugfixes in nfapi code.
- nf_getProcessName uses QueryFullProcessImageName on Vista and later versions of Windows.

build 1.3.9.5
- Fixed a race condition during indicating TCP receives to network applications.
- Optimized the performance of communications between user mode and kernel mode.

build 1.3.9.4
- Fixed a deadlock during removing DPC from queue.

build 1.3.9.2
- Fixed one more incompatibility with AVG. 

build 1.3.9.1
- Driver blocks TDI_RECEIVE requests issued for aborted connections.

build 1.3.9.0
- Fixed a race condition in code that executes DPC routines.

build 1.3.8.8
- Fixed an incompatibility with AVG and possibly some other antiviruses.

build 1.3.8.7
- Fixes to avoid memory align issues on some x64 systems.

build 1.3.8.5
- Added an additional parameter to UDP events and functions.

build 1.3.8.3
- The driver loading order is specified explicitly in nfapi code to avoid conflicts.
- Fixed an incompatibility with AVG.

build 1.3.7.9
- The size of internal buffer for UDP IRPs is increased in driver.

build 1.3.7.8
- Fixed a race condition in UDP filtering code in driver.
- Fixed a problem in driver with closing some TCP connections due to automatic suspending the data flow.
- The usage of non-paged memory pool is optimized in driver.

build 1.3.7.4
- The driver supports the undocumented TDI flags TDI_SEND_AND_DISCONNECT and TDI_RECEIVE_NO_PUSH, and allows filtering server-side sockets with non-standard behavior, e.g. IIS v6.0+.
- Filtering the packets transmitted by NetBT (Netbios) is disabled on the driver level.
- Other minor fixes for better compatibility and performance.

build 1.3.3
- It is possible to detach from the filtered sockets using new API functions nf_tcpDisableFiltering and nf_udpDisableFiltering.
- Fixed an incompatibility with ZoneAlarm.
- Added new C++ sample - TrafficShaper.
- Minor bugfixes and optimization. 

build 1.3.1
- Several fixes in driver for compatibility with Windows 7.

build 1.2.8
- The driver detects local proxies and avoids filtering loops by disabling indicating tcpConnectRequest events for proxy process. The protection requires reboot after installing and registering the driver.

build 1.2.7
- The driver ignores zero length TCP sends.

build 1.2.6
- Added ETW tracing to driver (use the switch C_DEFINES=-D_WPPTRACE=1 to turn it on in SOURCES).
- Minor bugfixes.

build 1.2.5
- Added new event udpConnectRequest to allow redirecting UDP traffic, transmitted via connected UDP sockets. The event is called when NF_INDICATE_CONNECT_REQUESTS flag is specified in an appropriate rule. DnsRedirector sample is updated to demonstrate using the event.
- Added a parameter for nf_addRule function, allowing to specify where to add new rule in driver rules list.
- Minor bugfixes.
- All samples are updated according to API changes. 
- Added a new Delphi sample NetRedirector.

build 1.2.4
- Fixed a problem with handling IP masks in rules.

build 1.2.3
- It is possible to redirect outgoing TCP connections and change the filtering flags for them dynamically in the new event tcpConnectRequest. 
  The event is called before establishing a new outgoing connection, when NF_INDICATE_CONNECT_REQUESTS flag is specified in an appropriate rule.
- Added new C++/C# sample TcpRedirector.
- Several bugs are fixed in driver and nfapi.

build 1.2.1
- The driver didn't filter some outgoing UDP packets.
- UDP packets were not blocked by rules.
- The filtering performance and memory usage are optimized.

build 1.1.9
- The driver issues own TDI_SEND and TDI_SEND_DATAGRAM requests from PASSIVE IRQL to avoid compatibility problems.

build 1.1.8
- Filtering UDP outgoing data is optimized.
- Minor bugfixes and optimization.

build 1.1.7
- Filtering TCP outgoing data is optimized.
- Fixed a deadlock occured in some cases during stopping nfapi client.

build 1.1.5
- Fixed a problem with handling TCP inbound packets in driver.
- The driver API client attaches/detaches from driver more correctly.
- Reduced the size of nfapi internal buffers to avoid the delays during sending large amount of TCP data.

build 1.1.3
- nfapi blocked the filtered UDP packets for the sockets created before API initialization.

build 1.1.2
- Fixed a problem with handling TCP disconnects.

build 1.1.1
- In some cases TCP connections didn't close properly.

build 1.1:
- Fixed a problem in UDP filtering driver code to avoid memory leaks in afd.sys.
- The memory usage in driver is optimized.
